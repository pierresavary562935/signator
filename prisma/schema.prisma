// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  username        String?          @unique
  email           String?          @unique
  emailVerified   DateTime?
  password        String?
  image           String?
  role            UserRole         @default(USER)
  accounts        Account[]
  sessions        Session[]
  Authenticator   Authenticator[]
  signingRequests SigningRequest[]
  documents       Document[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model SigningRequest {
  id         String    @id @default(cuid())
  documentId String
  document   Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  userId     String? // Nullable if assigned by email only
  user       User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  email      String? // Used when no user is selected
  status     String    @default("pending") // "pending", "signed"
  createdAt  DateTime  @default(now())
  signedAt   DateTime?
}

model Document {
  id              String           @id @default(cuid())
  title           String
  filename        String
  filePath        String // Path to the stored PDF file
  ownerId         String
  owner           User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  status          String           @default("draft") // "draft", "ready", "signed"
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  signingRequests SigningRequest[] // Relation to signing requests
  summary         String?          @db.Text
}
